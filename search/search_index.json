{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Your Name's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust","text":"<ul> <li>Primary author: Ayush Pai</li> <li>Reviewer: Max Yu</li> </ul>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":"<p>Before starting, ensure you have the following installed on your system:</p> <ul> <li>Git</li> <li>Docker</li> <li>Visual Studio Code (VS Code)</li> <li>Dev Containers extension for VS Code</li> </ul> <p>Note</p> <p>Ensure all prerequisites are properly installed before proceeding. Missing any of these tools may lead to issues later.</p>"},{"location":"tutorials/rust-setup/#step-by-step-instructions","title":"Step-by-Step Instructions","text":""},{"location":"tutorials/rust-setup/#step-1-create-a-new-project-directory","title":"Step 1: Create a New Project Directory","text":"<ol> <li>Open your terminal and create a new directory for your Rust project:    <pre><code>mkdir rust-project\ncd rust-project\n</code></pre></li> <li>Initialize a new Git repository locally:    <pre><code>git init\necho \"# Rust Project\" &gt; README.md\ngit add README.md\ngit commit -m \"Initial commit with README\"\n</code></pre></li> </ol> <p>Tip</p> <p>Use meaningful commit messages to help keep your repository organized and easy to navigate.</p>"},{"location":"tutorials/rust-setup/#step-2-create-a-remote-repository-and-link-it","title":"Step 2: Create a Remote Repository and Link It","text":"<ol> <li>Go to GitHub and create a new repository named <code>rust-project</code>.</li> <li>Do not initialize the repository with a README, .gitignore, or license.</li> <li>Back in your terminal, add the remote repository to your local Git repository:    <pre><code>git remote add origin https://github.com/YourGitHubUsername/rust-project.git\n</code></pre></li> <li>Push your initial commit to GitHub:    <pre><code>git branch -M main\ngit push -u origin main\n</code></pre></li> </ol> <p>Warning</p> <p>Be cautious when pasting your GitHub repository URL. Make sure it is correct to avoid linking to the wrong repository.</p>"},{"location":"tutorials/rust-setup/#step-3-configure-the-development-container-in-vs-code","title":"Step 3: Configure the Development Container in VS Code","text":"<ol> <li>Open the project in VS Code by selecting File &gt; Open Folder and navigating to your <code>rust-project</code> directory.</li> <li>In the Explorer pane, right-click and select New Folder, then name it <code>.devcontainer</code>.</li> <li>Inside the <code>.devcontainer</code> folder, create a new file named <code>devcontainer.json</code> and add the following content:    <pre><code>{\n  \"name\": \"Rust Dev Container\",\n  \"image\": \"mcr.microsoft.com/vscode/devcontainers/rust:latest\",\n  \"customizations\": {\n    \"vscode\": {\n      \"extensions\": [\"rust-lang.rust-analyzer\"]\n    }\n  }\n}\n</code></pre></li> <li>Use the integrated terminal (Ctrl+` or View &gt; Terminal) to add and commit the new files:    <pre><code>git add .devcontainer\ngit commit -m \"Add dev container configuration\"\n</code></pre></li> </ol> <p>Info</p> <p>The <code>devcontainer.json</code> file specifies the configuration for your development environment, including the base image (<code>rust:latest</code>) and the VS Code extension for Rust.</p>"},{"location":"tutorials/rust-setup/#step-4-open-the-dev-container-in-vs-code","title":"Step 4: Open the Dev Container in VS Code","text":"<ol> <li>From the Command Palette:</li> <li>Windows/Linux: Press <code>Ctrl+Shift+P</code>.</li> <li>Mac: Press <code>Cmd+Shift+P</code>.</li> <li>Select Reopen in Container.</li> <li>Wait for the container to build and initialize.</li> </ol> <p>Warning</p> <p>Ensure Docker is running before reopening in the container. Otherwise, VS Code will not be able to build the container.</p>"},{"location":"tutorials/rust-setup/#step-5-initialize-a-rust-project-in-the-dev-container","title":"Step 5: Initialize a Rust Project in the Dev Container","text":"<ol> <li> <p>Inside the integrated terminal in VS Code, verify your Rust installation by checking the version:    <pre><code>rustc --version\n</code></pre>    Ensure the displayed version is recent and supported.</p> </li> <li> <p>Initialize a new Rust module:    <pre><code>cargo new helloCOMP423 --bin --vcs none\n</code></pre></p> </li> </ol> <p>Note</p> <p>The <code>--bin</code> flag creates a binary (executable) Rust project, and <code>--vcs none</code> prevents Cargo from initializing a new Git repository.</p> <ol> <li>Inside the <code>helloCOMP423</code> directory, modify the file <code>main.rs</code> with the following content:    <pre><code>fn main() {\n    println!(\"Hello, COMP423!\");\n}\n</code></pre></li> </ol> <p>Tip</p> <p>Use the Rust <code>println!</code> macro to print text to the console. The <code>!</code> signifies it is a macro, not a regular function.</p>"},{"location":"tutorials/rust-setup/#step-6-compile-and-run-the-project-in-the-dev-container","title":"Step 6: Compile and Run the Project in the Dev Container","text":"<ol> <li>Compile the project:    <pre><code>cargo build\n</code></pre>    This generates a binary file in the <code>target/debug/</code> directory. The <code>cargo build</code> command is similar to the <code>gcc</code> command in C programming (as used in COMP211). Like <code>gcc</code>, <code>cargo build</code> compiles your source code into an executable file that does not require the Rust environment to run.</li> </ol> <p>Success</p> <p>If the compilation is successful, you\u2019ll find the compiled binary in the <code>target/debug/</code> directory.</p> <ol> <li> <p>Run the compiled binary directly:    <pre><code>./target/debug/helloCOMP423\n</code></pre>    You should see:    <pre><code>Hello COMP423\n</code></pre></p> </li> <li> <p>Alternatively, use the following command to compile and run in one step:    <pre><code>cargo run\n</code></pre></p> </li> </ol> <p>Question</p> <p>Why use <code>cargo build</code> over <code>cargo run</code>? Use <code>cargo build</code> if you plan to run the binary multiple times. It saves time by avoiding repeated compilation.</p> <p>Key Difference: <code>cargo build</code> creates a reusable binary file, whereas <code>cargo run</code> compiles and executes the program in a single step.</p>"},{"location":"tutorials/rust-setup/#step-7-push-updates-to-github-from-vs-code","title":"Step 7: Push Updates to GitHub from VS Code","text":"<ol> <li> <p>Add and commit the Rust project files:    <pre><code>git add .\ngit commit -m \"Add basic Rust project with Hello COMP423\"\n</code></pre></p> </li> <li> <p>Push the latest changes to GitHub using the integrated terminal:    <pre><code>git push\n</code></pre></p> </li> </ol> <p>Tip</p> <p>Regularly push your changes to keep your GitHub repository up to date.</p>"},{"location":"tutorials/rust-setup/#final-steps","title":"Final Steps","text":"<p>Congratulations! Your Rust project is now set up with a dev container and linked to a GitHub repository.</p> <p>Info</p> <p>For additional help, consult the official Rust documentation.</p>"}]}